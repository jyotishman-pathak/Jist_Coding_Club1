generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Leaderboard {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  commits     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hackathon   Int      @default(0)
  quiz        Int      @default(0)
  totalPoints Int      @default(20)
  workshop    Int      @default(0)
  user        User     @relation(fields: [userId], references: [id])
}

model AdditionalInfo {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  githubUrl String?
  linkedIn  String?
  instagram String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Events {
  id                 Int      @id @default(autoincrement())
  projectTitle       String
  projectDescription String
  instructor         String
  photo              String?
  technologies       String[]
  occuring           Occuring
  createdAt          DateTime @default(now())
}

model Projects {
  id                 Int              @id @default(autoincrement())
  projectTitle       String
  projectDescription String
  githubUrl          String?
  createdAt          DateTime         @default(now())
  occuring           ProjectOccurence
}

model hackathons {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  fees        String
}

model User {
  id                    Int           @id @default(autoincrement())
  name                  String
  email                 String        @unique
  password              String
  Department            String
  ProgrammingExperience Int
  imageUrl              String?
  Interest              String[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  projects   ProjectShow[]
  likes      Likes[]
  comments   Comment[]
  
  leaderboard           Leaderboard?
  additionalInfo        AdditionalInfo?
  PasswordReset         PasswordReset[]

  @@map("user")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


enum Occuring {
  UPCOMMING
  PAST
  HACKTHONS
}

enum ProjectOccurence {
  ONGOING
  COMPLETED
}


  


model ProjectShow {
  id        String      @id @default(uuid())
  userId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  
  content   String?    
  images    String[]    

  likes     Likes[]
  comments  Comment[]
}


model Likes {
  id        Int         @id @default(autoincrement())
  userId    Int
  projectId String

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   ProjectShow @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())

  @@unique([userId, projectId]) // prevent duplicate likes
}

model Comment {
  id        Int         @id @default(autoincrement())
  userId    Int
  projectId String
  content   String
  createdAt DateTime    @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   ProjectShow @relation(fields: [projectId], references: [id], onDelete: Cascade)
}


